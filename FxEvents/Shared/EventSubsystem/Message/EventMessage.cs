using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using FxEvents.Shared.EventSubsystem;
using FxEvents.Shared.Payload;
using FxEvents.Shared.Snowflakes;

namespace FxEvents.Shared.Message
{
    public class EventMessage : IMessage
    {
        public Snowflake Id { get; set; }
        public string? Signature { get; set; }
        public string? Endpoint { get; set; }
        public EventFlowType FlowType { get; set; }
        public IEnumerable<EventParameter> Parameters { get; set; }
        public EventMessage() { }
        public EventMessage(string endpoint, EventFlowType flowType, IEnumerable<EventParameter> parameters)
        {
            Id = Snowflake.Next();
            Endpoint = endpoint;
            FlowType = flowType;
            Parameters = parameters;
        }

        public EventMessage(BinaryReader reader)
        {
            UnpackSerializedBytes(reader);
        }
        public void PackSerializedBytes(BinaryWriter writer)
        {
            // Auto-generated by the Serialization Generator. Created by Lucas mantained by Manups4e.

            Id.PackSerializedBytes(writer);

            writer.Write(Signature is not null);
            if (Signature is not null)
            {
                if (Signature is default(System.String))
                {
                    throw new Exception("Member 'Signature' is a primitive and has no value (null). If this is not an issue, please declare it as nullable.");
                }
                writer.Write(Signature);
            }

            writer.Write(Endpoint is not null);
            if (Endpoint is not null)
            {
                if (Endpoint is default(System.String))
                {
                    throw new Exception("Member 'Endpoint' is a primitive and has no value (null). If this is not an issue, please declare it as nullable.");
                }
                writer.Write(Endpoint);
            }

            writer.Write((int)FlowType);

            writer.Write(Parameters is not null);
            if (Parameters is not null)
            {
                var parametersCount = Parameters.Count();
                writer.Write(parametersCount);
                foreach (var parametersEntry in Parameters)
                {
                    writer.Write(parametersEntry is not null);
                    if (parametersEntry is not null)
                    {
                        parametersEntry.PackSerializedBytes(writer);
                    }
                }
            }
        }
        public void UnpackSerializedBytes(BinaryReader reader)
        {
            // Auto-generated by the Serialization Generator. Created by Lucas mantained by Manups4e.

            Id = new Snowflake(reader);

            if (reader.ReadBoolean())
            {
                Signature = reader.ReadString();
            }

            if (reader.ReadBoolean())
            {
                Endpoint = reader.ReadString();
            }

            FlowType = (EventFlowType)reader.ReadInt32();

            if (reader.ReadBoolean())
            {
                var parametersCount = reader.ReadInt32();
                var parametersTemp = new EventParameter[parametersCount];
                for (var parametersIdx = 0; parametersIdx < parametersCount; parametersIdx++)
                {
                    EventParameter parametersTempEntry;
                    if (reader.ReadBoolean())
                    {
                        parametersTempEntry = new EventParameter(reader);
                        parametersTemp[parametersIdx] = parametersTempEntry;
                    }
                    Parameters = parametersTemp;
                }
            }
        }
        public override string ToString() => Endpoint;
    }
}